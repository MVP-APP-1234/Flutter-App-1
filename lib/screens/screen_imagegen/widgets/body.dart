// ignore_for_file: avoid_print

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/constants/constants.dart';
import 'package:flutter_application_1/screens/screen_imagegen/widgets/build_chip.dart';

import '../../../modals/api_generated_image/api_generated_image.dart';
import '../../../modals/autoGeneratedData.dart';
import '../pages/image_generated.dart';
import 'image_gen_text_button.dart';
import 'image_gen_text_field.dart';

Future callApi(String prompt) async {
  const url = 'http://15.185.47.213:8080/image-gen';
  final dio = Dio();
  Response response = await dio.post(
    url,
    data: {"prompt": prompt, "image_size": "256x256", "num_images": "4"},
  );
  ApiGeneratedImage apiGeneratedData =
      ApiGeneratedImage.fromJson(response.data);
  return apiGeneratedData;
}

class Body extends StatefulWidget {
  const Body({super.key});

  @override
  State<Body> createState() => _BodyState();
}

class _BodyState extends State<Body> {
  TextEditingController imageController = TextEditingController();
  bool isLoading = false;
  bool isPressed = false;
  List<AutoGeneratedData> autoGeneratedData = [
    AutoGeneratedData(text: 'Potrait', isSelected: false),
    AutoGeneratedData(text: 'Illustration', isSelected: false),
    AutoGeneratedData(text: 'Concept art', isSelected: false),
    AutoGeneratedData(text: 'Texture', isSelected: false),
    AutoGeneratedData(text: 'Impression', isSelected: false),
    AutoGeneratedData(text: 'Digital art', isSelected: false),
    AutoGeneratedData(text: 'V-Ray', isSelected: false),
    AutoGeneratedData(text: 'Full HD', isSelected: false),
    AutoGeneratedData(text: 'HD', isSelected: false),
    AutoGeneratedData(text: '4K', isSelected: false),
    AutoGeneratedData(text: '8K', isSelected: false),
    AutoGeneratedData(text: '3D', isSelected: false),
    AutoGeneratedData(text: 'Potrait', isSelected: false),
    AutoGeneratedData(text: 'Illustration', isSelected: false),
    AutoGeneratedData(text: 'Concept art', isSelected: false),
    AutoGeneratedData(text: 'Texture', isSelected: false),
    AutoGeneratedData(text: 'Impression', isSelected: false),
    AutoGeneratedData(text: 'Digital art', isSelected: false),
    AutoGeneratedData(text: 'V-Ray', isSelected: false),
    AutoGeneratedData(text: 'Full HD', isSelected: false),
    AutoGeneratedData(text: 'HD', isSelected: false),
    AutoGeneratedData(text: '4K', isSelected: false),
    AutoGeneratedData(text: '8K', isSelected: false),
    AutoGeneratedData(text: '3D', isSelected: false),
    AutoGeneratedData(text: 'Potrait', isSelected: false),
    AutoGeneratedData(text: 'Illustration', isSelected: false),
    AutoGeneratedData(text: 'Concept art', isSelected: false),
    AutoGeneratedData(text: 'Texture', isSelected: false),
    AutoGeneratedData(text: 'Impression', isSelected: false),
    AutoGeneratedData(text: 'Digital art', isSelected: false),
    AutoGeneratedData(text: 'V-Ray', isSelected: false),
    AutoGeneratedData(text: 'Full HD', isSelected: false),
    AutoGeneratedData(text: 'HD', isSelected: false),
    AutoGeneratedData(text: '4K', isSelected: false),
    AutoGeneratedData(text: '8K', isSelected: false),
    AutoGeneratedData(text: '3D', isSelected: false),
  ];
  @override
  void dispose() {
    super.dispose();
    imageController.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final formKey = GlobalKey<FormState>();
    ApiGeneratedImage apiGeneratedData = ApiGeneratedImage();
    Size size = MediaQuery.of(context).size;
    return Form(
      key: formKey,
      child: Column(
        children: [
          ImageGenTextField(imageController: imageController),
          autoGeneratedValues(size),
          isLoading == true
              ? const Center(
                  child: Padding(
                    padding: EdgeInsets.symmetric(vertical: defaultPadding * 2),
                    child: CircularProgressIndicator(
                      color: Colors.lightBlue,
                    ),
                  ),
                )
              : ImageGenTextButton(
                  formKey: formKey,
                  onPressed: () async {
                    if (formKey.currentState!.validate()) {
                      FocusManager.instance.primaryFocus!.unfocus();
                      isLoading = true;
                      setState(() {});
                      apiGeneratedData = await callApi(imageController.text);
                      isLoading = false;
                      setState(() {});
                      // ignore: use_build_context_synchronously
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ImageGenerated(
                            prompt: apiGeneratedData.urls,
                            length: apiGeneratedData.imageCount,
                            text: imageController.text,
                          ),
                        ),
                      );
                    }
                  },
                ),
        ],
      ),
    );
  }

  Container autoGeneratedValues(Size size) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: defaultPadding),
      height: size.width > 700 ? size.height * 0.55 : size.height * 0.3,
      width: size.width,
      color: Colors.grey.shade100,
      child: SingleChildScrollView(
        physics: const BouncingScrollPhysics(),
        child: Wrap(
          children: List.generate(
            autoGeneratedData.length,
            (index) => BuildChip(
              onPressed: () {
                FocusManager.instance.primaryFocus!.unfocus();
                if (autoGeneratedData[index].isSelected == false) {
                  autoGeneratedData[index].isSelected = true;
                } else {
                  autoGeneratedData[index].isSelected = false;
                }
                setState(() {});
              },
              length: autoGeneratedData[index].text.length,
              bgColor: autoGeneratedData[index].isSelected
                  ? const Color(0xFF7A14FF)
                  : Colors.transparent,
              color: autoGeneratedData[index].isSelected
                  ? const Color(0xFF7A14FF)
                  : Colors.transparent,
              text: autoGeneratedData[index].text,
            ),
          ),
        ),
      ),
    );
  }
}
