// ignore_for_file: avoid_print

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/constants/constants.dart';
import 'package:flutter_application_1/screens/screen_imagegen/widgets/build_chip.dart';

import '../../../modals/api_generated_image/api_generated_image.dart';
import '../pages/image_generated.dart';
import 'image_gen_text_button.dart';
import 'image_gen_text_field.dart';

Future callApi(String prompt) async {
  const url = 'http://15.185.47.213:8080/image-gen';
  final dio = Dio();
  Response response = await dio.post(
    url,
    data: {"prompt": prompt, "image_size": "256x256", "num_images": "4"},
  );
  print(response.data);
  ApiGeneratedImage apiGeneratedData =
      ApiGeneratedImage.fromJson(response.data);
  return apiGeneratedData;
}

class Body extends StatefulWidget {
  const Body({super.key});

  @override
  State<Body> createState() => _BodyState();
}

class _BodyState extends State<Body> {
  TextEditingController imageController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    final formKey = GlobalKey<FormState>();
    ApiGeneratedImage apiGeneratedData = ApiGeneratedImage();
    bool isLoading = false;
    Size size = MediaQuery.of(context).size;
    int currentIndex = 0;
    List<String> autoGeneratedList = [
      'Potrair',
      'Illustration',
      'Concept art',
      'Texture',
      'Impression',
      'Digital art',
      'V-Ray',
      'Full HD',
      'HD',
      '4k',
      '8K',
      '3D',
      'Potrair',
      'Illustration',
      'Concept art',
      'Texture',
      'Impression',
      'Digital art',
      'V-Ray',
      'Full HD',
      'HD',
      '4k',
      '8K',
      '3D',
      'Potrair',
      'Illustration',
      'Concept art',
      'Texture',
      'Impression',
      'Digital art',
      'V-Ray',
      'Full HD',
      'HD',
      '4k',
      '8K',
      '3D',
    ];

    @override
    void dispose() {
      super.dispose();
      imageController.dispose();
    }

    return Form(
      key: formKey,
      child: Column(
        children: [
          ImageGenTextField(imageController: imageController),
          autoGeneratedValues(size, autoGeneratedList, currentIndex),
          isLoading == true
              ? ImageGenTextButton(
                  formKey: formKey,
                  onPressed: null,
                )
              : ImageGenTextButton(
                  formKey: formKey,
                  onPressed: () async {
                    if (formKey.currentState!.validate()) {
                      print('hello');
                      isLoading = true;
                      setState(() {});
                      apiGeneratedData = await callApi(imageController.text);
                      // ignore: use_build_context_synchronously
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ImageGenerated(
                            prompt: apiGeneratedData.urls,
                            length: apiGeneratedData.imageCount,
                          ),
                        ),
                      );
                    }
                  },
                ),
        ],
      ),
    );
  }

  Container autoGeneratedValues(
      Size size, List<String> autoGeneratedList, int currentIndex) {
    return Container(
      padding:
          const EdgeInsets.symmetric(horizontal: defaultPadding, vertical: 10),
      height: 300,
      width: size.width,
      color: Colors.grey.shade100,
      child: SingleChildScrollView(
        physics: const BouncingScrollPhysics(),
        child: Wrap(
          children: List.generate(
            autoGeneratedList.length,
            (index) => GestureDetector(
              onTap: () {},
              child: Padding(
                padding: const EdgeInsets.only(right: 5),
                child: BuildChip(
                  text: autoGeneratedList[index],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
